# Generated from crasp.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,25,153,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,1,0,1,0,1,0,
        1,0,5,0,56,8,0,10,0,12,0,59,9,0,1,0,1,0,1,1,1,1,5,1,65,8,1,10,1,
        12,1,68,9,1,1,2,1,2,5,2,72,8,2,10,2,12,2,75,9,2,1,2,1,2,1,3,4,3,
        80,8,3,11,3,12,3,81,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,
        1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,
        10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,
        17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,
        21,1,22,1,22,1,23,3,23,140,8,23,1,23,4,23,143,8,23,11,23,12,23,144,
        1,24,4,24,148,8,24,11,24,12,24,149,1,24,1,24,0,0,25,1,1,3,2,5,3,
        7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,1,0,
        6,2,0,10,10,13,13,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,
        122,1,0,34,34,1,0,48,57,2,0,9,9,32,32,159,0,1,1,0,0,0,0,3,1,0,0,
        0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
        0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
        0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,
        0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,
        0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,1,51,1,0,0,0,3,62,1,0,0,0,
        5,69,1,0,0,0,7,79,1,0,0,0,9,83,1,0,0,0,11,88,1,0,0,0,13,94,1,0,0,
        0,15,97,1,0,0,0,17,102,1,0,0,0,19,105,1,0,0,0,21,107,1,0,0,0,23,
        110,1,0,0,0,25,112,1,0,0,0,27,114,1,0,0,0,29,116,1,0,0,0,31,118,
        1,0,0,0,33,120,1,0,0,0,35,122,1,0,0,0,37,126,1,0,0,0,39,130,1,0,
        0,0,41,132,1,0,0,0,43,134,1,0,0,0,45,136,1,0,0,0,47,142,1,0,0,0,
        49,147,1,0,0,0,51,52,5,47,0,0,52,53,5,47,0,0,53,57,1,0,0,0,54,56,
        8,0,0,0,55,54,1,0,0,0,56,59,1,0,0,0,57,55,1,0,0,0,57,58,1,0,0,0,
        58,60,1,0,0,0,59,57,1,0,0,0,60,61,6,0,0,0,61,2,1,0,0,0,62,66,7,1,
        0,0,63,65,7,2,0,0,64,63,1,0,0,0,65,68,1,0,0,0,66,64,1,0,0,0,66,67,
        1,0,0,0,67,4,1,0,0,0,68,66,1,0,0,0,69,73,5,34,0,0,70,72,8,3,0,0,
        71,70,1,0,0,0,72,75,1,0,0,0,73,71,1,0,0,0,73,74,1,0,0,0,74,76,1,
        0,0,0,75,73,1,0,0,0,76,77,5,34,0,0,77,6,1,0,0,0,78,80,7,4,0,0,79,
        78,1,0,0,0,80,81,1,0,0,0,81,79,1,0,0,0,81,82,1,0,0,0,82,8,1,0,0,
        0,83,84,5,116,0,0,84,85,5,114,0,0,85,86,5,117,0,0,86,87,5,101,0,
        0,87,10,1,0,0,0,88,89,5,102,0,0,89,90,5,97,0,0,90,91,5,108,0,0,91,
        92,5,115,0,0,92,93,5,101,0,0,93,12,1,0,0,0,94,95,5,105,0,0,95,96,
        5,102,0,0,96,14,1,0,0,0,97,98,5,101,0,0,98,99,5,108,0,0,99,100,5,
        115,0,0,100,101,5,101,0,0,101,16,1,0,0,0,102,103,5,38,0,0,103,104,
        5,38,0,0,104,18,1,0,0,0,105,106,5,33,0,0,106,20,1,0,0,0,107,108,
        5,61,0,0,108,109,5,61,0,0,109,22,1,0,0,0,110,111,5,60,0,0,111,24,
        1,0,0,0,112,113,5,61,0,0,113,26,1,0,0,0,114,115,5,63,0,0,115,28,
        1,0,0,0,116,117,5,58,0,0,117,30,1,0,0,0,118,119,5,43,0,0,119,32,
        1,0,0,0,120,121,5,45,0,0,121,34,1,0,0,0,122,123,5,109,0,0,123,124,
        5,105,0,0,124,125,5,110,0,0,125,36,1,0,0,0,126,127,5,109,0,0,127,
        128,5,97,0,0,128,129,5,120,0,0,129,38,1,0,0,0,130,131,5,35,0,0,131,
        40,1,0,0,0,132,133,5,40,0,0,133,42,1,0,0,0,134,135,5,41,0,0,135,
        44,1,0,0,0,136,137,5,44,0,0,137,46,1,0,0,0,138,140,5,13,0,0,139,
        138,1,0,0,0,139,140,1,0,0,0,140,141,1,0,0,0,141,143,5,10,0,0,142,
        139,1,0,0,0,143,144,1,0,0,0,144,142,1,0,0,0,144,145,1,0,0,0,145,
        48,1,0,0,0,146,148,7,5,0,0,147,146,1,0,0,0,148,149,1,0,0,0,149,147,
        1,0,0,0,149,150,1,0,0,0,150,151,1,0,0,0,151,152,6,24,0,0,152,50,
        1,0,0,0,8,0,57,66,73,81,139,144,149,1,6,0,0
    ]

class craspLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    LINE_COMMENT = 1
    VARIABLE = 2
    STRING_LITERAL = 3
    INT_LITERAL = 4
    TRUE = 5
    FALSE = 6
    IF = 7
    ELSE = 8
    AND = 9
    NOT = 10
    EQ = 11
    LT = 12
    ASSIGN = 13
    QUESTION = 14
    COLON = 15
    PLUS = 16
    MINUS = 17
    MIN = 18
    MAX = 19
    COUNT = 20
    LPAREN = 21
    RPAREN = 22
    COMMA = 23
    NL = 24
    WS = 25

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'true'", "'false'", "'if'", "'else'", "'&&'", "'!'", "'=='", 
            "'<'", "'='", "'?'", "':'", "'+'", "'-'", "'min'", "'max'", 
            "'#'", "'('", "')'", "','" ]

    symbolicNames = [ "<INVALID>",
            "LINE_COMMENT", "VARIABLE", "STRING_LITERAL", "INT_LITERAL", 
            "TRUE", "FALSE", "IF", "ELSE", "AND", "NOT", "EQ", "LT", "ASSIGN", 
            "QUESTION", "COLON", "PLUS", "MINUS", "MIN", "MAX", "COUNT", 
            "LPAREN", "RPAREN", "COMMA", "NL", "WS" ]

    ruleNames = [ "LINE_COMMENT", "VARIABLE", "STRING_LITERAL", "INT_LITERAL", 
                  "TRUE", "FALSE", "IF", "ELSE", "AND", "NOT", "EQ", "LT", 
                  "ASSIGN", "QUESTION", "COLON", "PLUS", "MINUS", "MIN", 
                  "MAX", "COUNT", "LPAREN", "RPAREN", "COMMA", "NL", "WS" ]

    grammarFileName = "crasp.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


