# Generated from crasp.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,32,190,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,1,0,1,
        0,1,1,1,1,1,2,1,2,1,2,1,2,5,2,74,8,2,10,2,12,2,77,9,2,1,2,1,2,1,
        3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,5,4,91,8,4,10,4,12,4,94,9,
        4,1,5,1,5,5,5,98,8,5,10,5,12,5,101,9,5,1,5,1,5,1,6,4,6,106,8,6,11,
        6,12,6,107,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,
        9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,
        13,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,
        18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,
        24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,
        29,1,30,3,30,177,8,30,1,30,4,30,180,8,30,11,30,12,30,181,1,31,4,
        31,185,8,31,11,31,12,31,186,1,31,1,31,0,0,32,1,1,3,2,5,3,7,4,9,5,
        11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,
        17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,
        28,57,29,59,30,61,31,63,32,1,0,6,2,0,10,10,13,13,3,0,65,90,95,95,
        97,122,4,0,48,57,65,90,95,95,97,122,1,0,34,34,1,0,48,57,2,0,9,9,
        32,32,196,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
        0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
        0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
        0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
        0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,
        0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,
        0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,1,65,1,0,0,0,3,67,1,0,0,0,5,69,1,
        0,0,0,7,80,1,0,0,0,9,88,1,0,0,0,11,95,1,0,0,0,13,105,1,0,0,0,15,
        109,1,0,0,0,17,114,1,0,0,0,19,120,1,0,0,0,21,123,1,0,0,0,23,128,
        1,0,0,0,25,131,1,0,0,0,27,134,1,0,0,0,29,136,1,0,0,0,31,139,1,0,
        0,0,33,141,1,0,0,0,35,143,1,0,0,0,37,146,1,0,0,0,39,149,1,0,0,0,
        41,151,1,0,0,0,43,153,1,0,0,0,45,155,1,0,0,0,47,157,1,0,0,0,49,159,
        1,0,0,0,51,163,1,0,0,0,53,167,1,0,0,0,55,169,1,0,0,0,57,171,1,0,
        0,0,59,173,1,0,0,0,61,179,1,0,0,0,63,184,1,0,0,0,65,66,5,91,0,0,
        66,2,1,0,0,0,67,68,5,93,0,0,68,4,1,0,0,0,69,70,5,47,0,0,70,71,5,
        47,0,0,71,75,1,0,0,0,72,74,8,0,0,0,73,72,1,0,0,0,74,77,1,0,0,0,75,
        73,1,0,0,0,75,76,1,0,0,0,76,78,1,0,0,0,77,75,1,0,0,0,78,79,6,2,0,
        0,79,6,1,0,0,0,80,81,5,35,0,0,81,82,5,105,0,0,82,83,5,109,0,0,83,
        84,5,112,0,0,84,85,5,111,0,0,85,86,5,114,0,0,86,87,5,116,0,0,87,
        8,1,0,0,0,88,92,7,1,0,0,89,91,7,2,0,0,90,89,1,0,0,0,91,94,1,0,0,
        0,92,90,1,0,0,0,92,93,1,0,0,0,93,10,1,0,0,0,94,92,1,0,0,0,95,99,
        5,34,0,0,96,98,8,3,0,0,97,96,1,0,0,0,98,101,1,0,0,0,99,97,1,0,0,
        0,99,100,1,0,0,0,100,102,1,0,0,0,101,99,1,0,0,0,102,103,5,34,0,0,
        103,12,1,0,0,0,104,106,7,4,0,0,105,104,1,0,0,0,106,107,1,0,0,0,107,
        105,1,0,0,0,107,108,1,0,0,0,108,14,1,0,0,0,109,110,5,116,0,0,110,
        111,5,114,0,0,111,112,5,117,0,0,112,113,5,101,0,0,113,16,1,0,0,0,
        114,115,5,102,0,0,115,116,5,97,0,0,116,117,5,108,0,0,117,118,5,115,
        0,0,118,119,5,101,0,0,119,18,1,0,0,0,120,121,5,105,0,0,121,122,5,
        102,0,0,122,20,1,0,0,0,123,124,5,101,0,0,124,125,5,108,0,0,125,126,
        5,115,0,0,126,127,5,101,0,0,127,22,1,0,0,0,128,129,5,38,0,0,129,
        130,5,38,0,0,130,24,1,0,0,0,131,132,5,124,0,0,132,133,5,124,0,0,
        133,26,1,0,0,0,134,135,5,33,0,0,135,28,1,0,0,0,136,137,5,61,0,0,
        137,138,5,61,0,0,138,30,1,0,0,0,139,140,5,60,0,0,140,32,1,0,0,0,
        141,142,5,62,0,0,142,34,1,0,0,0,143,144,5,60,0,0,144,145,5,61,0,
        0,145,36,1,0,0,0,146,147,5,62,0,0,147,148,5,61,0,0,148,38,1,0,0,
        0,149,150,5,61,0,0,150,40,1,0,0,0,151,152,5,63,0,0,152,42,1,0,0,
        0,153,154,5,58,0,0,154,44,1,0,0,0,155,156,5,43,0,0,156,46,1,0,0,
        0,157,158,5,45,0,0,158,48,1,0,0,0,159,160,5,109,0,0,160,161,5,105,
        0,0,161,162,5,110,0,0,162,50,1,0,0,0,163,164,5,109,0,0,164,165,5,
        97,0,0,165,166,5,120,0,0,166,52,1,0,0,0,167,168,5,35,0,0,168,54,
        1,0,0,0,169,170,5,40,0,0,170,56,1,0,0,0,171,172,5,41,0,0,172,58,
        1,0,0,0,173,174,5,44,0,0,174,60,1,0,0,0,175,177,5,13,0,0,176,175,
        1,0,0,0,176,177,1,0,0,0,177,178,1,0,0,0,178,180,5,10,0,0,179,176,
        1,0,0,0,180,181,1,0,0,0,181,179,1,0,0,0,181,182,1,0,0,0,182,62,1,
        0,0,0,183,185,7,5,0,0,184,183,1,0,0,0,185,186,1,0,0,0,186,184,1,
        0,0,0,186,187,1,0,0,0,187,188,1,0,0,0,188,189,6,31,0,0,189,64,1,
        0,0,0,8,0,75,92,99,107,176,181,186,1,6,0,0
    ]

class craspLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    LINE_COMMENT = 3
    IMPORT = 4
    VARIABLE = 5
    STRING_LITERAL = 6
    INT_LITERAL = 7
    TRUE = 8
    FALSE = 9
    IF = 10
    ELSE = 11
    AND = 12
    OR = 13
    NOT = 14
    EQ = 15
    LT = 16
    GT = 17
    LEQ = 18
    GEQ = 19
    ASSIGN = 20
    QUESTION = 21
    COLON = 22
    PLUS = 23
    MINUS = 24
    MIN = 25
    MAX = 26
    COUNT = 27
    LPAREN = 28
    RPAREN = 29
    COMMA = 30
    NL = 31
    WS = 32

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'['", "']'", "'#import'", "'true'", "'false'", "'if'", "'else'", 
            "'&&'", "'||'", "'!'", "'=='", "'<'", "'>'", "'<='", "'>='", 
            "'='", "'?'", "':'", "'+'", "'-'", "'min'", "'max'", "'#'", 
            "'('", "')'", "','" ]

    symbolicNames = [ "<INVALID>",
            "LINE_COMMENT", "IMPORT", "VARIABLE", "STRING_LITERAL", "INT_LITERAL", 
            "TRUE", "FALSE", "IF", "ELSE", "AND", "OR", "NOT", "EQ", "LT", 
            "GT", "LEQ", "GEQ", "ASSIGN", "QUESTION", "COLON", "PLUS", "MINUS", 
            "MIN", "MAX", "COUNT", "LPAREN", "RPAREN", "COMMA", "NL", "WS" ]

    ruleNames = [ "T__0", "T__1", "LINE_COMMENT", "IMPORT", "VARIABLE", 
                  "STRING_LITERAL", "INT_LITERAL", "TRUE", "FALSE", "IF", 
                  "ELSE", "AND", "OR", "NOT", "EQ", "LT", "GT", "LEQ", "GEQ", 
                  "ASSIGN", "QUESTION", "COLON", "PLUS", "MINUS", "MIN", 
                  "MAX", "COUNT", "LPAREN", "RPAREN", "COMMA", "NL", "WS" ]

    grammarFileName = "crasp.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


